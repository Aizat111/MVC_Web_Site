//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FinalHomeWork.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EmployeesInfoEntities1 : DbContext
    {
        public EmployeesInfoEntities1()
            : base("name=EmployeesInfoEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<countries> countries { get; set; }
        public virtual DbSet<departments> departments { get; set; }
        public virtual DbSet<dependents> dependents { get; set; }
        public virtual DbSet<employees> employees { get; set; }
        public virtual DbSet<jobs> jobs { get; set; }
        public virtual DbSet<locations> locations { get; set; }
        public virtual DbSet<regions> regions { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<log_department_ins_del> log_department_ins_del { get; set; }
        public virtual DbSet<log_dependent_ins_del> log_dependent_ins_del { get; set; }
        public virtual DbSet<log_employee_ins_del> log_employee_ins_del { get; set; }
        public virtual DbSet<log_job_ins_del> log_job_ins_del { get; set; }
        public virtual DbSet<log_location_ins_del> log_location_ins_del { get; set; }
        public virtual DbSet<log_region_ins_del> log_region_ins_del { get; set; }
        public virtual DbSet<admins> admins { get; set; }
        public virtual DbSet<log_country_upd> log_country_upd { get; set; }
        public virtual DbSet<log_department_upd> log_department_upd { get; set; }
        public virtual DbSet<log_employee_upd> log_employee_upd { get; set; }
        public virtual DbSet<log_job_upd> log_job_upd { get; set; }
        public virtual DbSet<log_location_upd> log_location_upd { get; set; }
        public virtual DbSet<log_region_upd> log_region_upd { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<ListJobs_Result> ListJobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListJobs_Result>("ListJobs");
        }
    
        public virtual ObjectResult<ListRegions_Result> ListRegions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListRegions_Result>("ListRegions");
        }
    
        public virtual int DeleteJob(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteJob", idParameter);
        }
    
        public virtual int InsertJob(string job_title, Nullable<decimal> min_salary, Nullable<decimal> max_salary)
        {
            var job_titleParameter = job_title != null ?
                new ObjectParameter("job_title", job_title) :
                new ObjectParameter("job_title", typeof(string));
    
            var min_salaryParameter = min_salary.HasValue ?
                new ObjectParameter("min_salary", min_salary) :
                new ObjectParameter("min_salary", typeof(decimal));
    
            var max_salaryParameter = max_salary.HasValue ?
                new ObjectParameter("max_salary", max_salary) :
                new ObjectParameter("max_salary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertJob", job_titleParameter, min_salaryParameter, max_salaryParameter);
        }
    
        public virtual int UdpateJob(Nullable<int> job_id, string job_title, Nullable<decimal> min_salary, Nullable<decimal> max_salary)
        {
            var job_idParameter = job_id.HasValue ?
                new ObjectParameter("job_id", job_id) :
                new ObjectParameter("job_id", typeof(int));
    
            var job_titleParameter = job_title != null ?
                new ObjectParameter("job_title", job_title) :
                new ObjectParameter("job_title", typeof(string));
    
            var min_salaryParameter = min_salary.HasValue ?
                new ObjectParameter("min_salary", min_salary) :
                new ObjectParameter("min_salary", typeof(decimal));
    
            var max_salaryParameter = max_salary.HasValue ?
                new ObjectParameter("max_salary", max_salary) :
                new ObjectParameter("max_salary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UdpateJob", job_idParameter, job_titleParameter, min_salaryParameter, max_salaryParameter);
        }
    
        public virtual int UpdateJob(Nullable<int> job_id, string job_title, Nullable<decimal> min_salary, Nullable<decimal> max_salary)
        {
            var job_idParameter = job_id.HasValue ?
                new ObjectParameter("job_id", job_id) :
                new ObjectParameter("job_id", typeof(int));
    
            var job_titleParameter = job_title != null ?
                new ObjectParameter("job_title", job_title) :
                new ObjectParameter("job_title", typeof(string));
    
            var min_salaryParameter = min_salary.HasValue ?
                new ObjectParameter("min_salary", min_salary) :
                new ObjectParameter("min_salary", typeof(decimal));
    
            var max_salaryParameter = max_salary.HasValue ?
                new ObjectParameter("max_salary", max_salary) :
                new ObjectParameter("max_salary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateJob", job_idParameter, job_titleParameter, min_salaryParameter, max_salaryParameter);
        }
    
        public virtual int DeleteRegion(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRegion", idParameter);
        }
    
        public virtual int InsertRegion(string region_name)
        {
            var region_nameParameter = region_name != null ?
                new ObjectParameter("region_name", region_name) :
                new ObjectParameter("region_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRegion", region_nameParameter);
        }
    
        public virtual int UpdateRegion(Nullable<int> region_id, string region_name)
        {
            var region_idParameter = region_id.HasValue ?
                new ObjectParameter("region_id", region_id) :
                new ObjectParameter("region_id", typeof(int));
    
            var region_nameParameter = region_name != null ?
                new ObjectParameter("region_name", region_name) :
                new ObjectParameter("region_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRegion", region_idParameter, region_nameParameter);
        }
    
        public virtual int DeleteCountry(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCountry", idParameter);
        }
    
        public virtual int InsertCountry(string country_id, string country_name, Nullable<int> region_id)
        {
            var country_idParameter = country_id != null ?
                new ObjectParameter("country_id", country_id) :
                new ObjectParameter("country_id", typeof(string));
    
            var country_nameParameter = country_name != null ?
                new ObjectParameter("country_name", country_name) :
                new ObjectParameter("country_name", typeof(string));
    
            var region_idParameter = region_id.HasValue ?
                new ObjectParameter("region_id", region_id) :
                new ObjectParameter("region_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCountry", country_idParameter, country_nameParameter, region_idParameter);
        }
    
        public virtual ObjectResult<ListCountries_Result> ListCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListCountries_Result>("ListCountries");
        }
    
        public virtual int UpdateCountry(string country_id, string country_name, Nullable<int> region_id)
        {
            var country_idParameter = country_id != null ?
                new ObjectParameter("country_id", country_id) :
                new ObjectParameter("country_id", typeof(string));
    
            var country_nameParameter = country_name != null ?
                new ObjectParameter("country_name", country_name) :
                new ObjectParameter("country_name", typeof(string));
    
            var region_idParameter = region_id.HasValue ?
                new ObjectParameter("region_id", region_id) :
                new ObjectParameter("region_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCountry", country_idParameter, country_nameParameter, region_idParameter);
        }
    
        public virtual int DeleteLocation(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocation", idParameter);
        }
    
        public virtual int InsertLocation(string street_address, string postal_code, string city, string state_province, string country_id)
        {
            var street_addressParameter = street_address != null ?
                new ObjectParameter("street_address", street_address) :
                new ObjectParameter("street_address", typeof(string));
    
            var postal_codeParameter = postal_code != null ?
                new ObjectParameter("postal_code", postal_code) :
                new ObjectParameter("postal_code", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var state_provinceParameter = state_province != null ?
                new ObjectParameter("state_province", state_province) :
                new ObjectParameter("state_province", typeof(string));
    
            var country_idParameter = country_id != null ?
                new ObjectParameter("country_id", country_id) :
                new ObjectParameter("country_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLocation", street_addressParameter, postal_codeParameter, cityParameter, state_provinceParameter, country_idParameter);
        }
    
        public virtual ObjectResult<ListLocations_Result> ListLocations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListLocations_Result>("ListLocations");
        }
    
        public virtual int UpdateLocation(Nullable<int> location_id, string street_address, string postal_code, string city, string state_province, string country_id)
        {
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("location_id", location_id) :
                new ObjectParameter("location_id", typeof(int));
    
            var street_addressParameter = street_address != null ?
                new ObjectParameter("street_address", street_address) :
                new ObjectParameter("street_address", typeof(string));
    
            var postal_codeParameter = postal_code != null ?
                new ObjectParameter("postal_code", postal_code) :
                new ObjectParameter("postal_code", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var state_provinceParameter = state_province != null ?
                new ObjectParameter("state_province", state_province) :
                new ObjectParameter("state_province", typeof(string));
    
            var country_idParameter = country_id != null ?
                new ObjectParameter("country_id", country_id) :
                new ObjectParameter("country_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLocation", location_idParameter, street_addressParameter, postal_codeParameter, cityParameter, state_provinceParameter, country_idParameter);
        }
    
        public virtual ObjectResult<ListDeraptments_Result> ListDeraptments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListDeraptments_Result>("ListDeraptments");
        }
    
        public virtual ObjectResult<ListDepartments_Result> ListDepartments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListDepartments_Result>("ListDepartments");
        }
    
        public virtual int DeleteDepartment(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDepartment", idParameter);
        }
    
        public virtual int InsertDepartment(string department_name, Nullable<int> location_id)
        {
            var department_nameParameter = department_name != null ?
                new ObjectParameter("department_name", department_name) :
                new ObjectParameter("department_name", typeof(string));
    
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("location_id", location_id) :
                new ObjectParameter("location_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDepartment", department_nameParameter, location_idParameter);
        }
    
        public virtual int UpdateDepartment(Nullable<int> department_id, string department_name, Nullable<int> location_id)
        {
            var department_idParameter = department_id.HasValue ?
                new ObjectParameter("department_id", department_id) :
                new ObjectParameter("department_id", typeof(int));
    
            var department_nameParameter = department_name != null ?
                new ObjectParameter("department_name", department_name) :
                new ObjectParameter("department_name", typeof(string));
    
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("location_id", location_id) :
                new ObjectParameter("location_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDepartment", department_idParameter, department_nameParameter, location_idParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", idParameter);
        }
    
        public virtual int InsertEmployee(string first_name, string last_name, string email, string phone_number, Nullable<System.DateTime> hire_date, Nullable<int> job_id, Nullable<decimal> salary, Nullable<int> manager_id, Nullable<int> department_id)
        {
            var first_nameParameter = first_name != null ?
                new ObjectParameter("first_name", first_name) :
                new ObjectParameter("first_name", typeof(string));
    
            var last_nameParameter = last_name != null ?
                new ObjectParameter("last_name", last_name) :
                new ObjectParameter("last_name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            var hire_dateParameter = hire_date.HasValue ?
                new ObjectParameter("hire_date", hire_date) :
                new ObjectParameter("hire_date", typeof(System.DateTime));
    
            var job_idParameter = job_id.HasValue ?
                new ObjectParameter("job_id", job_id) :
                new ObjectParameter("job_id", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(decimal));
    
            var manager_idParameter = manager_id.HasValue ?
                new ObjectParameter("manager_id", manager_id) :
                new ObjectParameter("manager_id", typeof(int));
    
            var department_idParameter = department_id.HasValue ?
                new ObjectParameter("department_id", department_id) :
                new ObjectParameter("department_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployee", first_nameParameter, last_nameParameter, emailParameter, phone_numberParameter, hire_dateParameter, job_idParameter, salaryParameter, manager_idParameter, department_idParameter);
        }
    
        public virtual ObjectResult<ListEmployees_Result> ListEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListEmployees_Result>("ListEmployees");
        }
    
        public virtual int UpdateEmployee(Nullable<int> employee_id, string first_name, string last_name, string email, string phone_number, Nullable<System.DateTime> hire_date, Nullable<int> job_id, Nullable<decimal> salary, Nullable<int> manager_id, Nullable<int> department_id)
        {
            var employee_idParameter = employee_id.HasValue ?
                new ObjectParameter("employee_id", employee_id) :
                new ObjectParameter("employee_id", typeof(int));
    
            var first_nameParameter = first_name != null ?
                new ObjectParameter("first_name", first_name) :
                new ObjectParameter("first_name", typeof(string));
    
            var last_nameParameter = last_name != null ?
                new ObjectParameter("last_name", last_name) :
                new ObjectParameter("last_name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            var hire_dateParameter = hire_date.HasValue ?
                new ObjectParameter("hire_date", hire_date) :
                new ObjectParameter("hire_date", typeof(System.DateTime));
    
            var job_idParameter = job_id.HasValue ?
                new ObjectParameter("job_id", job_id) :
                new ObjectParameter("job_id", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(decimal));
    
            var manager_idParameter = manager_id.HasValue ?
                new ObjectParameter("manager_id", manager_id) :
                new ObjectParameter("manager_id", typeof(int));
    
            var department_idParameter = department_id.HasValue ?
                new ObjectParameter("department_id", department_id) :
                new ObjectParameter("department_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", employee_idParameter, first_nameParameter, last_nameParameter, emailParameter, phone_numberParameter, hire_dateParameter, job_idParameter, salaryParameter, manager_idParameter, department_idParameter);
        }
    }
}
